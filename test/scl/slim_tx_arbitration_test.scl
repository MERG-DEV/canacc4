configuration for "PIC18F2480" is
end configuration;
--
testbench for "PIC18F2480" is
begin
  test_timeout: process is
    begin
      wait for 880 ms;
      report("slim_tx_arbitration_test: TIMEOUT");
      report(PC); -- Crashes simulator, MDB will report current source line
      PC <= 0;
      wait;
    end process test_timeout;
    --
  slim_tx_arbitration_test: process is
    type test_result is (pass, fail);
    variable test_state : test_result;
    variable tx_count   : integer;
    begin
      report("slim_tx_arbitration_test: START");
      test_state := pass;
      RA3 <= '1'; -- Setup button not pressed
      --
      wait until RB7 == '1'; -- Booted into SLiM
      --
      RXB0D0 <= 16#73#;      -- CBUS read node parameter by index
      RXB0D1 <= 0;           -- NN high
      RXB0D2 <= 0;           -- NN low
      RXB0D3 <= 0;
      RXB0CON.RXFUL <= '1';
      RXB0DLC.DLC3 <= '1';
      CANSTAT <= 16#0C#;
      PIR3.RXB0IF <= '1';
      wait until INTCON < 128;
      wait until INTCON > 127;
      --
      tx_count := 0;
      while tx_count < 10 loop
        if TXB1CON.TXREQ == '0' then
          wait until TXB1CON.TXREQ == '1';
        end if;
        if TXB1SIDH != 16#B0# then
          report("slim_tx_arbitration_test: Wrong SIDH");
          test_state := fail;
        end if;
        tx_count := tx_count + 1;
        TXB1CON.TXLARB <= '1';
        CANSTAT <= 16#02#;
        PIR3.ERRIF <= '1';
        wait until INTCON < 128;
        wait until INTCON > 127;
      end loop;
      --
      tx_count := 0;
      while tx_count < 10 loop
        if TXB1CON.TXREQ == '0' then
          wait until TXB1CON.TXREQ == '1';
        end if;
        if TXB1SIDH != 16#30# then
          report("slim_tx_arbitration_test: Wrong SIDH priority change");
          test_state := fail;
        end if;
        tx_count := tx_count + 1;
        TXB1CON.TXLARB <= '1';
        CANSTAT <= 16#02#;
        PIR3.ERRIF <= '1';
        wait until INTCON < 128;
        wait until INTCON > 127;
      end loop;
      --
      wait until TXB1CON.TXREQ == '1' for 2 ms;
      if TXB1CON.TXREQ == '1' then
        report("slim_tx_arbitration_test: Unexpected transmit");
        test_state := fail;
      end if;
      --
      if test_state == pass then
        report("slim_tx_arbitration_test: PASS");
      else
        report("slim_tx_arbitration_test: FAIL");
      end if;          
      PC <= 0;
      wait;
    end process slim_tx_arbitration_test;
end testbench;
