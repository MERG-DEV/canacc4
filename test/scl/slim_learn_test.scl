configuration for "PIC18F2480" is
end configuration;
--
testbench for "PIC18F2480" is
begin
  test_timeout: process is
    begin
      wait for 33751 ms;
      report("slim_learn_test: TIMEOUT");
      report(PC); -- Crashes simulator, MDB will report current source line
      PC <= 0;
      wait;
    end process test_timeout;
    --
  slim_learn_test: process is
    type test_result is (pass, fail);
    variable test_state : test_result;
    file     event_file   : text;
    variable file_stat    : file_open_status;
    variable report_line  : string;
    variable trigger_line : string;
    variable trigger_val  : integer;
    variable trigger_ok   : boolean;
    begin
      report("slim_learn_test: START");
      test_state := pass;
      RA3 <= '1'; -- Setup button not pressed
      RB4 <= '1'; -- Learn off
      RA5 <= '1'; -- Unlearn off
      --
      wait until RB7 == '1'; -- Booted into SLiM
      --
      -- Learn events for output 3
      RB4 <= '0'; -- Learn on
      RB0 <= '0'; -- Sel 0 on
      RB1 <= '1'; -- Sel 1 off
      RB5 <= '1'; -- Polarity normal, On event => A, Off event => B
      report("slim_learn_test: Pair 3 normal");
      --
      if RXB0CON.RXFUL != '0' then
        wait until RXB0CON.RXFUL == '0';
      end if;
      report("slim_learn_test: Long on 0x0102,0x0402");
      RXB0D0 <= 16#90#;    -- ACON, CBUS accessory long on
      RXB0D1 <= 1;         -- NN high
      RXB0D2 <= 2;         -- NN low
      RXB0D3 <= 4;
      RXB0D4 <= 2;
      RXB0CON.RXFUL <= '1';
      RXB0DLC.DLC3 <= '1';
      CANSTAT <= 16#0C#;
      PIR3.RXB0IF <= '1';
      --
      wait until PORTC != 0;
      if PORTC == 16#20# then -- Output 3A on
        report("slim_learn_test: 3A triggered");
      else
        report("slim_learn_test: Wrong output");
        test_state := fail;
      end if;
      wait until PORTC == 0;
      --
      if RXB0CON.RXFUL != '0' then
        wait until RXB0CON.RXFUL == '0';
      end if;
      report("slim_learn_test: Short on 0x0304,0x0204");
      RXB0D0 <= 16#98#;    -- ACON, CBUS accessory short on
      RXB0D1 <= 3;         -- NN high
      RXB0D2 <= 4;         -- NN low
      RXB0D3 <= 2;
      RXB0D4 <= 4;
      RXB0CON.RXFUL <= '1';
      RXB0DLC.DLC3 <= '1';
      CANSTAT <= 16#0C#;
      PIR3.RXB0IF <= '1';
      --
      wait until PORTC != 0;
      if PORTC == 16#20# then -- Output 3A on
        report("slim_learn_test: 3A triggered");
      else
        report("slim_learn_test: Wrong output");
        test_state := fail;
      end if;
      wait until PORTC == 0;
      --
      RB5 <= '0'; -- Polarity inverse, On event => B, Off event => A
      report("slim_learn_test: Pair 3 inverted");
      --
      if RXB0CON.RXFUL != '0' then
        wait until RXB0CON.RXFUL == '0';
      end if;
      report("slim_learn_test: Long off 0x0102,0x0204");
      RXB0D0 <= 16#91#;    -- ACON, CBUS accessory long off
      RXB0D1 <= 1;         -- NN high
      RXB0D2 <= 2;         -- NN low
      RXB0D3 <= 2;
      RXB0D4 <= 4;
      RXB0CON.RXFUL <= '1';
      RXB0DLC.DLC3 <= '1';
      CANSTAT <= 16#0C#;
      PIR3.RXB0IF <= '1';
      --
      wait until PORTC != 0;
      if PORTC == 16#20# then -- Output 3A on
        report("slim_learn_test: 3A triggered");
      else
        report("slim_learn_test: Wrong output");
        test_state := fail;
      end if;
      wait until PORTC == 0;
      --
      if RXB0CON.RXFUL != '0' then
        wait until RXB0CON.RXFUL == '0';
      end if;
      report("slim_learn_test: Short on 0x0506,0x0402");
      RXB0D0 <= 16#98#;    -- ACON, CBUS accessory short on
      RXB0D1 <= 5;         -- NN high
      RXB0D2 <= 6;         -- NN low
      RXB0D3 <= 4;
      RXB0D4 <= 2;
      RXB0CON.RXFUL <= '1';
      RXB0DLC.DLC3 <= '1';
      CANSTAT <= 16#0C#;
      PIR3.RXB0IF <= '1';
      --
      wait until PORTC != 0;
      if PORTC == 16#04# then -- Output 3B on
        report("slim_learn_test: 3B triggered");
      else
        report("slim_learn_test: Wrong output");
        test_state := fail;
      end if;
      wait until PORTC == 0;
      --
      -- Learn events for output 2
      report("slim_learn_test: Pair 2 normal");
      RB4 <= '0'; -- Learn on
      RB0 <= '1'; -- Sel 0 off
      RB1 <= '0'; -- Sel 1 on
      RB5 <= '1'; -- Polarity normal
      --
      if RXB0CON.RXFUL != '0' then
        wait until RXB0CON.RXFUL == '0';
      end if;
      report("slim_learn_test: Long off 0x0201,0x0604");
      RXB0D0 <= 16#91#;    -- ACON, CBUS accessory long off
      RXB0D1 <= 2;         -- NN high
      RXB0D2 <= 1;         -- NN low
      RXB0D3 <= 6;
      RXB0D4 <= 4;
      RXB0CON.RXFUL <= '1';
      RXB0DLC.DLC3 <= '1';
      CANSTAT <= 16#0C#;
      PIR3.RXB0IF <= '1';
      --
      wait until PORTC != 0;
      if PORTC == 16#40# then -- Output 2B on
        report("slim_learn_test: 2B triggered");
      else
        report("slim_learn_test: Wrong output");
        test_state := fail;
      end if;
      wait until PORTC == 0;
      --
      if RXB0CON.RXFUL != '0' then
        wait until RXB0CON.RXFUL == '0';
      end if;
      report("slim_learn_test: Short on 0x0708,0x0402");
      RXB0D0 <= 16#98#;    -- ACON, CBUS accessory short on
      RXB0D1 <= 7;         -- NN high
      RXB0D2 <= 8;         -- NN low
      RXB0D3 <= 4;
      RXB0D4 <= 2;
      RXB0CON.RXFUL <= '1';
      RXB0DLC.DLC3 <= '1';
      CANSTAT <= 16#0C#;
      PIR3.RXB0IF <= '1';
      --
      wait until PORTC != 0;
      if PORTC == 16#02# then -- Output 2A on
        report("slim_learn_test: 2A triggered");
      else
        report("slim_learn_test: Wrong output");
        test_state := fail;
      end if;
      wait until PORTC == 0;
      --
      RB5 <= '0'; -- Polarity inverse, On event => B, Off event => A
      report("slim_learn_test: Pair 2 inverted");
      --
      if RXB0CON.RXFUL != '0' then
        wait until RXB0CON.RXFUL == '0';
      end if;
      report("slim_learn_test: Long off 0x0102,0x0402");
      RXB0D0 <= 16#91#;    -- ACON, CBUS accessory long off
      RXB0D1 <= 1;         -- NN high
      RXB0D2 <= 2;         -- NN low
      RXB0D3 <= 4;
      RXB0D4 <= 2;
      RXB0CON.RXFUL <= '1';
      RXB0DLC.DLC3 <= '1';
      CANSTAT <= 16#0C#;
      PIR3.RXB0IF <= '1';
      --
      wait until PORTC != 0;
      if PORTC == 16#02# then -- Output 2A on
        report("slim_learn_test: 2A triggered");
      else
        report("slim_learn_test: Wrong output");
        test_state := fail;
      end if;
      wait until PORTC == 0;
      --
      wait until PORTC != 0;
      if PORTC == 16#04# then -- Output 3B on
        report("slim_learn_test: 3B triggered");
      else
        report("slim_learn_test: Wrong output");
        test_state := fail;
      end if;
      wait until PORTC == 0;
      --
      RB4 <= '1'; -- Learn off
      --
      file_open(file_stat, event_file, "./data/original_events.dat", read_mode);
      if file_stat != open_ok then
        report("slim_boot_test: Failed to open event data file");
        PC <= 0;
        wait;
      end if;
      --
      while endfile(event_file) == false loop
        if RXB0CON.RXFUL != '0' then
          wait until RXB0CON.RXFUL == '0';
        end if;
        readline(event_file, report_line);
        report(report_line);
        read(event_file, RXB0D0, 1);
        read(event_file, RXB0D1, 1);
        read(event_file, RXB0D2, 1);
        read(event_file, RXB0D3, 1);
        read(event_file, RXB0D4, 1);
        RXB0CON.RXFUL <= '1';
        RXB0DLC.DLC3 <= '1';
        CANSTAT <= 16#0C#;
        PIR3.RXB0IF <= '1';
        --
        readline(event_file, report_line);
        while match(report_line, "Done") == false loop
          readline(event_file, trigger_line);
          read(trigger_line, trigger_val);
          --
          wait until PORTC != 0;
          if PORTC == trigger_val then
            report(report_line);
         else
            report("slim_learn_test: Wrong output");
            test_state := fail;
          end if;
          wait until PORTC == 0;
          --
          readline(event_file, report_line);
        end loop;
        --
        wait on PORTC for 1005 ms;
        if PORTC != 0 then
          report("slim_learn_test: Unexpected trigger");
          test_state := fail;
          wait until PORTC == 0;
        end if;
      end loop;
      --
      if test_state == pass then
        report("slim_learn_test: PASS");
      else
        report("slim_learn_test: FAIL");
      end if;          
      PC <= 0;
      wait;
    end process slim_learn_test;
end testbench;
